name: CI

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'

    tags:
      - '*'

  pull_request:

env:
  MAIN_REPO: ncsa/standalone-smm-analytics

jobs:

  # ----------------------------------------------------------------------
  # DOCKER BUILD
  # ----------------------------------------------------------------------
  docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast:
      matrix:
        name:
          - autophrase
        include:
          - name: autophrase
            dockerfile: Dockerfile
            workdir: rabbitmq/autophrase
            hub_project: socialmediamacroscope/autophrase
    steps:
    # checkout source code
    - uses: actions/checkout@v2

   # calculate some variables that are used later
    - name: version information
      run: |
        if [ "${{ github.event.release.target_commitish }}" != "" ]; then
          BRANCH="${{ github.event.release.target_commitish }}"
        elif [[ "${{github.event_name}}" == "pull_request" ]]; then
            BRANCH="PR-${{github.event.pull_request.number}}"
        else
          BRANCH=${GITHUB_REF##*/}
        fi
        echo "GITHUB_BRANCH=${BRANCH}" >> $GITHUB_ENV

        if [ "$BRANCH" == "main" ]; then
          VERSION=$(cat manual_jb/content/_config.yml | grep "version" | head -1 | awk -F= "{print $2 }" | sed "s/[[:alpha:]|,|-|\"|:|#|[:space:]]//g" | sed "s/-//g")
          VERSIONS="latest"
          OLDVERSION=""
          TMPVERSION=$VERSION
          while [ "$OLDVERSION" != "$TMPVERSION" ]; do
            VERSIONS="${VERSIONS} ${TMPVERSION}"
            OLDVERSION="${TMPVERSION}"
            TMPVERSION=$(echo ${OLDVERSION} | sed 's/\.[0-9]*$//')
          done
          echo "DOC_VERSION=$VERSION" >> $GITHUB_ENV
          echo "DOC_TAGS=${VERSIONS}" >> $GITHUB_ENV

          # Swagger API Version
          VERSION=$(cat restapi/data.json | grep \"version\" | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,",]//g' | tr -d '[[:space:]]')
          VERSIONS="latest"
          OLDVERSION=""
          TMPVERSION=$VERSION
          while [ "$OLDVERSION" != "$TMPVERSION" ]; do
            VERSIONS="${VERSIONS} ${TMPVERSION}"
            OLDVERSION="${TMPVERSION}"
            TMPVERSION=$(echo ${OLDVERSION} | sed 's/\.[0-9]*$//')
          done
          echo "API_VERSION=${VERSION}" >> $GITHUB_ENV
          echo "API_TAGS=${VERSIONS}" >> $GITHUB_ENV
        elif [ "$BRANCH" == "develop" ]; then
          echo "DOC_VERSION=develop" >> $GITHUB_ENV
          echo "API_VERSION=develop" >> $GITHUB_ENV
          echo "DOC_TAGS=develop" >> $GITHUB_ENV
          echo "API_TAGS=develop" >> $GITHUB_ENV
        else
          echo "DOC_VERSION=testing" >> $GITHUB_ENV
          echo "API_VERSION=testing" >> $GITHUB_ENV
          echo "DOC_TAGS=${BRANCH}" >> $GITHUB_ENV
          echo "API_TAGS=${BRANCH}" >> $GITHUB_ENV
        fi

    - name: Build docker image
      uses: elgohr/Publish-Docker-Github-Action@3.04
      with:
        dockerfile: ${{ matrix.dockerfile }}
        name: ${{ matrix.hub_project }}
        no_push: true
        workdir: ${{ matrix.workdir }}

    - name: Publish docker image to Docker hub
      if: |
        github.repository == env.MAIN_REPO &&
        (github.event_name == env.GITHUB_BRANCH == 'main')
      uses: elgohr/Publish-Docker-Github-Action@3.04
      with:
        dockerfile: ${{ matrix.dockerfile }}
        registry: hub.docker.com
        name: ${{ matrix.hub_project }}
        username: ${{ secrets.HUB_USERNAME }}
        password: ${{ secrets.HUB_PASSWORD }}
        tags: "${{ env.TAGS }}"

    - name: Publish doc image to Docker Hub
      #if: github.event_name != 'pull_request' && github.repository == env.MAIN_REPO
      if: github.repository == env.MAIN_REPO
      uses: elgohr/Publish-Docker-Github-Action@3.04
      with:
        registry: hub.docker.com
        name: ${{ matrix.hub_project }}
        username: ${{ secrets.HUB_USERNAME }}
        password: ${{ secrets.HUB_PASSWORD }}
        tags: "${{ env.DOC_TAGS }}"
        workdir: ${{ matrix.workdir }}
